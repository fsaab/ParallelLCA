//
//  SensitivityCalculator.hpp
//  LCA.Kernel
//
//  Created by francois saab on 2/21/18.
//  Copyright Â© 2018 fsaab. All rights reserved.
//

#ifndef SensitivityCalculator_hpp
#define SensitivityCalculator_hpp

#include <stdio.h>
#include <stdio.h>
#include <vector>
#include "../Utilities/ResultsUtilsSingle.hpp"
#include "Models/AppSettings.hpp"
#include "Models/CalculatorData.h"
#include "../Utilities/ResultsUtilsSingle.hpp"
#include "Models/TwoDimStore.hpp"
#include "../LCAModels/LCAIndexes.hpp"
#include "../Utilities/StringUtils.h"
#include "Models/IterationsResults.hpp"
#include "../Utilities/RankingUtils.hpp"
#include "Models/CorrelationResult.h"
#include "Models/ImpactStat.hpp"
#include "../DAL/LCADB.hpp"
#include <omp.h>
#include <chrono>
#include <string>
#include "Models/SamplesRanks.hpp"
#include "../libs/libDescriptive.hpp"

struct more_than_key
{

    inline bool operator()(const CorrelationResult &item1, const CorrelationResult &item2)
    {

        if (isnan(item1.cor))
            return false;
        if (isnan(item2.cor))
            return true;
        return (pow(item1.cor, 2) > pow(item2.cor, 2));
    }
};

class SensitivityCalculator
{
    AppSettings settings;
    CalculatorData *calculatorData;
    // LCADB * lcadb;
    IterationsResults *iterationsResults;
    vector<SamplesRanks> ranks_A;
    vector<SamplesRanks> ranks_B;

    //vector<vector<SamplesRanks>> allranks;

  public:
    SensitivityCalculator(AppSettings _settings,
                          CalculatorData *_calculatorData,

                          IterationsResults *_iterationsResults                                                           //, LCADB* _lcadb
                          ) : calculatorData(_calculatorData), settings(_settings), iterationsResults(_iterationsResults) //, lcadb(_lcadb)
    {
    }

    void pre_rank_entity(long length,
                         vector<vector<double>> &store,
                         vector<ExchangeItem> &items,
                         vector<SamplesRanks> &ranks)
    {

        int num_processors = settings.Parallelism;

        int slotsize = length / num_processors;
#pragma omp parallel for shared(length, num_processors, slotsize)
        for (int th = 0; th < num_processors; th++)
        {
            vector<SamplesRanks> ranks_th;
            int ii = th * slotsize;

            while (ii < (th * slotsize) + slotsize)
            {

                if (ii >= Alength)
                {
                    break;
                };

                Exchange exch = items[ii].exch;

                long in_exchange = exch.exchangeId;
                long procid = exch.processId;

                double *in_data = TwoDimVectorStore::getDataForAllIterations(store,
                                                                settings.montecarlo_iterations, ii);
                double *in_data_ranks = new double[settings.montecarlo_iterations];

                RankingUtils::spearmanrank(in_data, settings.montecarlo_iterations, in_data_ranks);

                double avg = Descriptive::all(in_data_ranks, settings.montecarlo_iterations)[0];

                SamplesRanks rank(in_exchange, procid, avg);

                for (int i = 0; i < settings.montecarlo_iterations; i++)
                {
                    rank.ranks.push_back(in_data_ranks[i]);
                }

                ranks_th.push_back(rank);

                delete[] in_data_ranks;
                in_data_ranks = nullptr;

                delete[] in_data;
                in_data = nullptr;

                ii++;
            }

#pragma omp critical
            {
                ranks.insert(ranks.end(), ranks_th.begin(), ranks_th.end());
            }
        }
    }

    void pre_rank()
    {

        pre_rank_entity((*calculatorData).A_unc_size,      //length of uncertain cells
                        (*iterationsResults).store_A_ptr,  //samples 2D matrix
                        (*calculatorData).A_unc_exchanges, // vector of uncetain items
                        ranks_A                            // destination of ranks
        );

        pre_rank_entity((*calculatorData).B_unc_size,
                        (*iterationsResults).store_B_ptr,
                        (*calculatorData).B_unc_exchanges,
                        ranks_B);
    }

    void correlateImpactCategoryToInputs(int output, string path)
    {

        double sumSquare = 0;
        //double* out_data_ranks = new double [settings.montecarlo_iterations];
        TwoDimVectorStore store;

        double *out_data = store.getDataForAllIterations(
            (*iterationsResults).store_lcia_ptr,
            settings.montecarlo_iterations,
            (*calculatorData).lcaIndexes.ImpactCategoryIndexIndices[output]);

        // RankingUtils::spearmanrank(out_data,settings.montecarlo_iterations, out_data_ranks);

        //val ranksY=(new Ranking()).grouppedRankX(out._2)

        vector<CorrelationResult> corrs;

        int Alength = (*calculatorData).A_unc_size;
        int Blength = (*calculatorData).B_unc_size;
        double sumA = 0;
        /* A */

        int num_processors = settings.Parallelism;

        int slotsize = Alength / num_processors;

        corrs.reserve(Alength + Blength);

#pragma omp parallel for shared(sumA, corrs, Alength, num_processors, slotsize, output)
        for (int th = 0; th < num_processors; th++)
        {
            vector<CorrelationResult> corrs_A_th;
            int ii = th * slotsize;

            while (ii < (th * slotsize) + slotsize)
            {

                if (ii >= Alength)
                {
                    break;
                };

                /*if((*calculatorData).A_unc_exchanges[ii].exch.isBackground){
                     ii++;
                    continue;
                }*/
                //
                //                if ((*calculatorData).A_unc_exchanges[ii].exch.uncertaintyType == 0) {
                //                    continue;
                //                }

                //long in_flow = (*calculatorData).A_exchanges[ii].exch.flowId;
                //long in_process = (*calculatorData).A_exchanges[ii].exch.processId;
                long in_exchange = (*calculatorData).A_unc_exchanges[ii].exch.exchangeId;
                char in_type = 'I';

                double *in_data = store.getDataForAllIterations((*iterationsResults).store_A_ptr, settings.montecarlo_iterations, ii);
                // double* in_data_ranks = new double [settings.montecarlo_iterations];
                //                RankingUtils::spearmanrank(
                //                        in_data,
                //                        settings.montecarlo_iterations
                //                        , in_data_ranks);

                //                double in_avg;
                //                if((*calculatorData).A_unc_exchanges[ii].exch.uncertaintyType==1){
                //                  in_avg=   log(fabs((*calculatorData).A_unc_exchanges[ii].exch.parameter1));
                //                }else{
                //                in_avg= (*calculatorData).A_unc_exchanges[ii].exch.parameter1;
                //                }

                //double out_avg = (*calculatorData).impactStats[(*calculatorData).lcaIndexes.ImpactCategoryIndexIndices[output]].mean;

                double cor = RankingUtils::spearman_corr(in_data, out_data, settings.montecarlo_iterations);

                //                RankingUtils::spearman_corr_formula(in_data_ranks,
                //                        in_avg, out_data_ranks, out_avg, settings.montecarlo_iterations);

                //                delete [] in_data_ranks;
                //                in_data_ranks = nullptr;

                delete[] in_data;
                in_data = nullptr;

                /*if (!(isnan(cor) || isinf(cor))) {
                    sumA += pow(cor, 2);
                }*/

                if (!isnan(cor) && !isinf(cor))
                    corrs_A_th.push_back(CorrelationResult(in_exchange, in_type, output, cor));

                ii++;
            }

#pragma omp critical
            {
                for (int sumi = 0; sumi < corrs_A_th.size(); sumi++)
                {
                    double cor = corrs_A_th[sumi].cor;

                    if (!isnan(cor) && !isinf(cor))
                    {
                        sumA += pow(cor, 2);
                    }
                }
                corrs.insert(corrs.end(), corrs_A_th.begin(), corrs_A_th.end());
            }
        }

        sumSquare = sumSquare + sumA;

        /* B */

        slotsize = Blength / num_processors;

        double sumB = 0;
#pragma omp parallel for shared(sumB, corrs, Blength, num_processors, slotsize, output)
        for (int th = 0; th < num_processors; th++)
        {
            vector<CorrelationResult> corrs_B_th;

            for (int ii = th * slotsize; ii < (th * slotsize) + slotsize; ii++)
            {

                if (ii >= Blength)
                {
                    break;
                };

                //if((*calculatorData).B_unc_exchanges[ii].exch.isBackground){
                //    continue;
                //}

                //long in_flow = (*calculatorData).B_exchanges[ii].exch.flowId;
                // long in_process = (*calculatorData).B_exchanges[ii].exch.processId;
                long in_exchange = (*calculatorData).B_unc_exchanges[ii].exch.exchangeId;

                char in_type = 'E';
                //double* in_data_ranks = new double [settings.montecarlo_iterations];
                double *in_data = store.getDataForAllIterations((*iterationsResults).store_B_ptr, settings.montecarlo_iterations, ii);

                //                RankingUtils::spearmanrank(
                //                        in_data
                //                        , settings.montecarlo_iterations, in_data_ranks
                //                        );

                //                double in_avg;
                //                if((*calculatorData).B_unc_exchanges[ii].exch.uncertaintyType==1){
                //                  in_avg=   log(fabs((*calculatorData).B_unc_exchanges[ii].exch.parameter1));
                //                }else{
                //                in_avg= (*calculatorData).B_unc_exchanges[ii].exch.parameter1;
                //                }

                //double out_avg = (*calculatorData).impactStats[(*calculatorData).lcaIndexes.ImpactCategoryIndexIndices[output]].mean;

                double cor = RankingUtils::spearman_corr(in_data, out_data, settings.montecarlo_iterations);

                delete[] in_data;
                in_data = nullptr;
                //RankingUtils::spearman_corr_formula(in_data_ranks, in_avg, out_data_ranks, out_avg, settings.montecarlo_iterations);

                //delete [] in_data_ranks;
                //in_data_ranks = nullptr;

                if (!isnan(cor) && !isinf(cor))
                    corrs_B_th.push_back(CorrelationResult(in_exchange, in_type, output, cor));
            }

#pragma omp critical
            {
                for (int sumi = 0; sumi < corrs_B_th.size(); sumi++)
                {

                    double cor = corrs_B_th[sumi].cor;

                    if (!isnan(cor) && !isinf(cor))
                    {
                        sumB += pow(cor, 2);
                    }
                }
                corrs.insert(corrs.end(), corrs_B_th.begin(), corrs_B_th.end());
            }
        }

        sumSquare = sumSquare + sumB;

        delete[] out_data;
        out_data = nullptr;

        std::sort(corrs.begin(), corrs.end(), more_than_key());

        double take = corrs.size();
        if (take > 100)
        {
            take = 100;
        }

        if (take != 0)
        {
            std::stringstream ss;
            for (int i = 0; i < take; i++)
            {

                ss << corrs[i].in_type << "," << corrs[i].in_id << "," << corrs[i].out_id << ","
                   << pow(corrs[i].cor, 2) << "," << pow(corrs[i].cor, 2) / sumSquare << "," << sumSquare << endl;
            }

            FileUtils fileUtils;
            fileUtils.writeTextToFile(ss.str(), path);
        }
    }

    std::vector<std::string> split(std::string input, std::string sep)
    {

        vector<string> strs;
        boost::split(strs, input, boost::is_any_of(sep));

        return strs;
    }

    void correlateImpactCategoryToInputsFormulae(int output, string path)
    {

        double sumSquare = 0;

        TwoDimVectorStore store;

        double *out_data = store.getDataForAllIterations(
            (*iterationsResults).store_lcia_ptr,
            settings.montecarlo_iterations,
            (*calculatorData).lcaIndexes.ImpactCategoryIndexIndices[output]);

        double *out_data_ranks = new double[settings.montecarlo_iterations];

        double out_avg = Descriptive::all(out_data_ranks, settings.montecarlo_iterations)[0];

        RankingUtils::spearmanrank(out_data, settings.montecarlo_iterations, out_data_ranks);

        delete[] out_data;
        out_data = nullptr;

        vector<CorrelationResult> corrs;

        int Alength = (*calculatorData).A_unc_size;
        int Blength = (*calculatorData).B_unc_size;
        double sumA = 0;

        /* A */

        int num_processors = settings.Parallelism;
        int slotsize = Alength / num_processors;
        corrs.reserve(Alength + Blength);

        //#pragma omp parallel for shared(sumA,corrs,Alength,num_processors,slotsize,output)
        for (int th = 0; th < num_processors; th++)
        {

            vector<CorrelationResult> corrs_A_th;
            int ii = th * slotsize;

            while (ii < (th * slotsize) + slotsize)
            {

                if (ii >= Alength)
                {
                    break;
                };

                long in_exchange = ranks_A[ii].EntityId;
                char in_type = 'I';

                SamplesRanks sRank = ranks_A[ii];

                double cor = RankingUtils::spearman_corr_formula(&sRank.ranks[0],
                                                                 sRank.Average, out_data_ranks, out_avg, settings.montecarlo_iterations);

                if (!isnan(cor) && !isinf(cor))
                    corrs_A_th.push_back(CorrelationResult(in_exchange, in_type, output, cor));

                ii++;
            }

            //#pragma omp critical
            //{

            for (int sumi = 0; sumi < corrs_A_th.size(); sumi++)
            {
                double cor = corrs_A_th[sumi].cor;

                if (!isnan(cor) && !isinf(cor))
                {
                    sumA += pow(cor, 2);
                }
            }

            corrs.insert(corrs.end(), corrs_A_th.begin(), corrs_A_th.end());
            //}
        }

        sumSquare = sumSquare + sumA;

        /* B */

        slotsize = Blength / num_processors;

        double sumB = 0;
        //#pragma omp parallel for shared(sumB,corrs,Blength,num_processors,slotsize,output)
        for (int th = 0; th < num_processors; th++)
        {
            vector<CorrelationResult> corrs_B_th;

            for (int ii = th * slotsize; ii < (th * slotsize) + slotsize; ii++)
            {
                if (ii >= Blength)
                {
                    break;
                };

                long in_exchange = ranks_B[ii].EntityId;
                char in_type = 'E';

                SamplesRanks sRank = ranks_B[ii];

                double cor = RankingUtils::spearman_corr_formula(&sRank.ranks[0],
                                                                 sRank.Average, out_data_ranks, out_avg, settings.montecarlo_iterations);

                if (!isnan(cor) && !isinf(cor))
                    corrs_B_th.push_back(CorrelationResult(in_exchange, in_type, output, cor));
            }

            //#pragma omp critical
            //{
            for (int sumi = 0; sumi < corrs_B_th.size(); sumi++)
            {

                double cor = corrs_B_th[sumi].cor;

                if (!isnan(cor) && !isinf(cor))
                {
                    sumB += pow(cor, 2);
                }
            }
            corrs.insert(corrs.end(), corrs_B_th.begin(), corrs_B_th.end());
            //}
        }

        sumSquare = sumSquare + sumB;

        delete[] out_data_ranks;
        out_data_ranks = nullptr;

        std::sort(corrs.begin(), corrs.end(), more_than_key());

        double take = corrs.size();

        if (take > 100)
        {
            take = 100;
        }

        if (take != 0)
        {
            std::stringstream ss;

            for (int i = 0; i < take; i++)
            {
                ss << corrs[i].in_type << "," << corrs[i].in_id << "," << corrs[i].out_id << ","
                   << pow(corrs[i].cor, 2) << "," << pow(corrs[i].cor, 2) / sumSquare << "," << sumSquare << endl;
            }

            FileUtils fileUtils;
            fileUtils.writeTextToFile(ss.str(), path);
        }
    }

    void run()
    {

        FileUtils fileUtils;

        std::stringstream ss_sensitivityPath;

        ss_sensitivityPath << settings.RootPath << "data/calculations/" << settings.CalculationId << "/SensitivityPerImpactCat/";

        fileUtils.newfolder(ss_sensitivityPath.str());

        int cat_length = (*calculatorData).lcaIndexes.ImpactCategoryIndexLength();

        //(*calculatorData).LoadUncertainCells();

        cout << "starting pre-ranking ...." << endl;

        pre_rank();

        cout << "starting correlations ...." << endl;

        auto start = std::chrono::high_resolution_clock::now();

#pragma omp parallel for
        for (int i = 0; i < cat_length; i++)
        {
            int c = (*calculatorData).lcaIndexes.ImpactCategoryIndex[i];

            std::stringstream ss;
            ss << settings.RootPath << "data/calculations/" << settings.CalculationId << "/SensitivityPerImpactCat/"
               << "SENS_lcia_" << settings.SystemId << "_" << settings.CalculationId << "_" << std::to_string(c) << ".txt";

            correlateImpactCategoryToInputsFormulae(c, ss.str());
        }

        auto finish = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed = finish - start;
        std::cout << "Pearsons," << settings.ProjectId << "," << elapsed.count() << std::endl;
    }

    void rank()
    {

        cout << "Ranking....." << endl;

        TwoDimVectorStore store;

        int Alength = (*calculatorData).A_unc_size;
        int Blength = (*calculatorData).B_unc_size;

        double sumA = 0;
        /* A */

        int num_processors = settings.Parallelism;
        int slotsize = Alength / num_processors;

        vector<SamplesRanks> ranks_A;

#pragma omp parallel for shared(Alength, num_processors, slotsize)
        for (int th = 0; th < num_processors; th++)
        {
            vector<SamplesRanks> ranks_A_th;
            int ii = th * slotsize;

            while (ii < (th * slotsize) + slotsize)
            {

                if (ii >= Alength)
                {
                    break;
                };

                long in_exchange = (*calculatorData).A_unc_exchanges[ii].exch.exchangeId;
                long procid = (*calculatorData).A_unc_exchanges[ii].exch.processId;
                char in_type = 'I';

                double *in_data = store.getDataForAllIterations((*iterationsResults).store_A_ptr, settings.montecarlo_iterations, ii);
                double *in_data_ranks = new double[settings.montecarlo_iterations];
                RankingUtils::spearmanrank(in_data, settings.montecarlo_iterations, in_data_ranks);

                /*if (!(isnan(cor) || isinf(cor))) {
                    sumA += pow(cor, 2);
                }*/

                double avg = Descriptive::all(in_data, settings.montecarlo_iterations)[0];

                SamplesRanks rank_A(in_exchange, procid, avg);

                for (int i = 0; i < settings.montecarlo_iterations; i++)
                {
                    (rank_A).ranks.push_back(in_data_ranks[i]);
                }

                ranks_A_th.push_back(rank_A);

                delete[] in_data;
                in_data = nullptr;

                delete[] in_data_ranks;
                in_data_ranks = nullptr;

                ii++;
            }

#pragma omp critical
            {

                ranks_A.insert(ranks_A.end(), ranks_A_th.begin(), ranks_A_th.end());

                string ssA;
                string path = settings.RootPath +
                              "data/Ranks/" + to_string(settings.montecarlo_iterations) + "/ARanks/" +
                              to_string(th + 1) + ".txt";

                for (int i = 0; i < ranks_A_th.size(); i++)
                {

                    vector<double> ranksv = ranks_A_th[i].ranks;

                    ssA += to_string(ranks_A_th[i].EntityId) + "," + to_string(ranks_A_th[i].Average) + "," +
                           to_string(ranks_A_th[i].ProcessId) + ",";

                    for (int j = 0; j < ranksv.size(); j++)
                    {

                        ssA += to_string(ranksv[j]) + ",";
                    }

                    ssA += '\n';
                }

                FileUtils fileUtils;
                fileUtils.appendTextToFile(ssA, path);
            }
        }

        cout << "done Aranks" << endl;

        /* B */
        vector<SamplesRanks> ranks_B;
        slotsize = Blength / num_processors;

#pragma omp parallel for shared(Blength, num_processors, slotsize)
        for (int th = 0; th < num_processors; th++)
        {
            vector<SamplesRanks> ranks_B_th;
            int ii = th * slotsize;

            while (ii < (th * slotsize) + slotsize)
            {

                if (ii >= Blength)
                {
                    break;
                };

                long in_exchange = (*calculatorData).B_unc_exchanges[ii].exch.exchangeId;
                long procid = (*calculatorData).B_unc_exchanges[ii].exch.processId;

                char in_type = 'E';

                double *in_data = store.getDataForAllIterations((*iterationsResults).store_B_ptr, settings.montecarlo_iterations, ii);
                double *in_data_ranks = new double[settings.montecarlo_iterations];
                RankingUtils::spearmanrank(in_data, settings.montecarlo_iterations, in_data_ranks);

                double avg = Descriptive::all(in_data, settings.montecarlo_iterations)[0];

                SamplesRanks rank_B(in_exchange, procid, avg);

                for (int i = 0; i < settings.montecarlo_iterations; i++)
                {
                    rank_B.ranks.push_back(in_data_ranks[i]);
                }

                ranks_B_th.push_back(rank_B);

                delete[] in_data;
                in_data = nullptr;

                delete[] in_data_ranks;
                in_data_ranks = nullptr;

                ii++;
            }

#pragma omp critical
            {

                ranks_B.insert(ranks_B.end(), ranks_B_th.begin(), ranks_B_th.end());

                string ssB;
                string path = settings.RootPath +
                              "data/Ranks/" + to_string(settings.montecarlo_iterations) + "/BRanks/" +
                              to_string(th + 1) + ".txt";

                for (int i = 0; i < ranks_B_th.size(); i++)
                {

                    vector<double> rank = ranks_B_th[i].ranks;

                    ssB += to_string(ranks_B_th[i].EntityId) + "," + to_string(ranks_B_th[i].Average) + "," +
                           to_string(ranks_B_th[i].ProcessId) + ",";

                    for (int j = 0; j < rank.size(); j++)
                    {

                        ssB += to_string(rank[j]) + ",";
                    }

                    ssB += '\n';
                }

                FileUtils fileUtils;
                //cout << ssA.str() << endl;
                fileUtils.appendTextToFile(ssB, path);
            }
        }

        cout << "done Branks" << endl;
    }
};

#endif /* SensitivityCalculator_hpp */
